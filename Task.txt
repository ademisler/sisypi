Rol: Sen, Manifest V3 standartlarına hakim, uzman bir Google Chrome Eklentisi geliştiricisisin.
Görev: Sana sunduğum bu tek dosyalık HTML prototipini alarak, tüm işlevleri çalışan, robust ve güvenli bir Google Chrome Eklentisi'ne dönüştürmeni istiyorum. Prototipteki tüm UI elemanları, özellikler ve mantık korunmalı, ancak Chrome Eklentisi mimarisine uygun şekilde yeniden yapılandırılmalıdır.
Sağlanan Prototip Kodu aşağıdadır.
Aşağıdaki kod, eklentinin popup arayüzünü ve tüm temel mantığını içeren bir simülasyondur.
Detaylı Talimatlar ve Mimari Gereksinimler:
Lütfen aşağıdaki yapıya ve mantığa sadık kalarak eklentiyi inşa et:
1. Dosya Yapısı:
Eklenti için aşağıdaki dosya yapısını oluşturmanı istiyorum:
manifest.json
popup/
popup.html
popup.css
popup.js
scripts/
background.js
content.js
lib/ (Harici kütüphaneler için)
fontawesome/ (Font Awesome dosyaları)
sortable.min.js
icons/
icon16.png
icon48.png
icon128.png (Bu ikonlar için geçici, basit bir ikon oluşturabilirsin)
2. manifest.json (Manifest V3):
Gerekli tüm izinleri (storage, activeTab, scripting, downloads, scripting) tanımla.
action (eylem) olarak popup/popup.html'yi göster.
Arka plan betiği olarak scripts/background.js'i bir service worker olarak tanımla.
Gerekli ikonları belirt.
3. popup.html, popup.css, popup.js (Popup Arayüzü):
Prototipteki <body> içeriğini popup.html'ye taşı.
Prototipteki <style> içeriğini popup.css dosyasına taşı.
popup.html içinden CDN linklerini kaldır ve yerel kütüphane dosyalarına (lib/) link ver.
popup.js'nin Sorumlulukları:
Yalnızca popup arayüzünün mantığını yönetmelidir: Görünümler arası geçiş (ana menü/editör), buton tıklamaları, senaryo listesini oluşturma, adımları DOM'a ekleme/silme/güncelleme.
Prototipteki senaryolariDepodanYukle, gorunumuGoster, adimEkleDOM gibi DOM manipülasyon fonksiyonları burada yer almalıdır.
En Önemli Değişiklik: popup.js, web sayfasında işlem yapması veya veri kaydetmesi gerektiğinde, bu istekleri background.js'ye mesaj olarak göndermelidir. Örneğin, "Çalıştır" butonuna basıldığında background.js'ye {action: "runScenario", scenarioId: "..."} gibi bir mesaj göndermelidir.
4. background.js (Arka Plan ve Durum Yöneticisi):
Eklentinin beyni ve tek doğruluk kaynağı (single source of truth) olmalıdır.
Prototipteki localStorage kullanımını tamamen chrome.storage.local ile değiştir. Tüm senaryolar burada saklanmalıdır.
popup.js'den gelen mesajları dinlemelidir (chrome.runtime.onMessage.addListener).
Sorumlulukları:
Senaryoları chrome.storage.local'dan okumak ve yazmak.
"Çalıştır" komutu geldiğinde, ilgili senaryoyu depodan alıp content.js'ye çalıştırması için göndermek.
"Element Seç" komutu geldiğinde, content.js'yi aktif sekmeye enjekte edip (chrome.scripting.executeScript) ona "seçim moduna geç" mesajı göndermek.
Yedekleme (chrome.downloads.download) ve yedekten geri yükleme mantığını yönetmek.
5. content.js (İçerik Betiği):
Bu betik, doğrudan aktif web sayfası üzerinde çalışmalıdır.
background.js'den gelen komutları dinlemelidir.
Sorumlulukları:
Element Seçim Modu: Prototipteki secimModunuBaslat mantığı buraya taşınmalıdır. Kullanıcı bir elemente tıkladığında, o elementin CSS seçicisini (selector) oluşturup background.js'ye geri göndermelidir.
Senaryo Yürütme Motoru: Prototipteki senaryoyuCalistir fonksiyonunun "eylem" kısmı (switch-case bloğu) burada olmalıdır. background.js'den gelen adımları (tıkla, yaz, kopyala vb.) sırayla web sayfasının DOM'u üzerinde gerçekleştirmelidir.
Sayfa üzerindeki elementleri bulmak için document.querySelector kullanmalıdır.
6. Mantıksal Akış Özeti:
Senaryo Çalıştırma:
Kullanıcı popup.js'de "Çalıştır"a tıklar.
popup.js -> background.js'ye "çalıştır" mesajı gönderir.
background.js senaryo adımlarını chrome.storage'dan okur.
background.js -> content.js'ye "bu adımları çalıştır" mesajı gönderir.
content.js adımları web sayfasında sırayla uygular ve ilerleme/hata durumunu background.js'ye raporlar.
background.js bu durumu popup.js'ye ileterek arayüzü günceller.
Element Seçme:
Kullanıcı popup.js'de "Element Seçerek Adım Ekle"ye tıklar.
popup.js -> background.js'ye "seçim modunu başlat" mesajı gönderir.
background.js, content.js'yi sayfaya enjekte eder ve "seçim moduna geç" mesajı gönderir.
content.js sayfada vurgulama ve tıklama dinleyicilerini aktif eder.
Kullanıcı bir elemente tıklar.
content.js seçiciyi oluşturur ve background.js'ye gönderir.
background.js bu seçiciyi popup.js'ye iletir.
popup.js eylem yapılandırma modal'ını bu seçici ile açar.
Lütfen bu mimariye uygun olarak tüm dosyaların tam ve çalışır kodlarını oluştur. Kodun temiz, okunabilir ve yorum satırları ile açıklanmış olmasına özen göster.



<!DOCTYPE html>
<!-- Dil başlangıçta tr, script tarafından değiştirilecek -->
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sisypi - Nihai Sürüm</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <style>
        :root {
            --primary-color: #6d28d9; --secondary-color: #ede9fe; --background-color: #ffffff;
            --text-color: #1f2937; --border-color: #d1d5db; --success-color: #10b981;
            --danger-color: #ef4444; --highlight-color: #db2777; --comment-color: #0ea5e9;
            --block-color: #f59e0b; --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }
        *, *::before, *::after { box-sizing: border-box; }
        body {
            font-family: var(--font-family); background-color: #f3f4f6; color: var(--text-color);
            margin: 0; padding: 40px; display: flex; justify-content: center; align-items: flex-start; min-height: 100vh;
        }
        #sisypi-konteyner {
            width: 450px; background-color: var(--background-color); border-radius: 12px;
            box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04);
            overflow: hidden; display: flex; flex-direction: column; max-height: 90vh; height: 800px;
        }
        .baslik {
            padding: 12px 20px; background-color: white; border-bottom: 1px solid var(--border-color);
            display: flex; justify-content: space-between; align-items: center; flex-shrink: 0;
        }
        .baslik h1 { font-size: 24px; margin: 0; color: var(--primary-color); font-weight: 700; }
        .baslik .buton-grup { display: flex; gap: 8px; }

        .icerik { padding: 20px; overflow-y: auto; flex-grow: 1; }
        .editor-icerik-alani { padding: 20px; flex-grow: 1; overflow-y: auto; }
        .editor-alt-bilgi { padding: 15px 20px; border-top: 1px solid var(--border-color); background-color: #f9fafb; flex-shrink: 0; }
        
        button {
            font-family: inherit; border: none; border-radius: 8px; padding: 10px 16px; font-size: 14px;
            font-weight: 600; cursor: pointer; transition: all 0.2s ease; display: inline-flex;
            align-items: center; justify-content: center; gap: 8px;
        }
        .btn-birincil { background-color: var(--primary-color); color: white; }
        .btn-birincil:hover:not(:disabled) { background-color: #5b21b6; }
        .btn-birincil:disabled { background-color: #a78bfa; cursor: not-allowed; }
        .btn-ikincil { background-color: #e5e7eb; color: #374151; }
        .btn-ikincil:hover { background-color: #d1d5db; }
        .btn-basari { background-color: var(--success-color); color: white; }
        .btn-basari:hover { background-color: #059669; }
        .btn-ikon { background: transparent; padding: 6px; color: #6b7280; }
        .btn-ikon:hover { background: #f3f4f6; color: var(--text-color); }
        .dil-btn { font-size: 12px; padding: 4px 8px; }
        
        .input-alani { width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 16px; margin-bottom: 16px; background-color: #f9fafb;}
        #senaryo-adi-input { font-size: 18px; font-weight: 600; }
        #senaryo-url-input { font-size: 14px; font-family: 'Courier New', Courier, monospace; }
        label.input-etiketi { font-size: 12px; font-weight: 500; color: #6b7280; margin-bottom: 4px; display: block; }

        #adimlar-konteyner { display: flex; flex-direction: column; gap: 10px; min-height: 100px; }
        .adim-karti { background-color: white; padding: 10px 12px; border-left: 4px solid var(--primary-color); border-radius: 6px; display: flex; align-items: center; gap: 10px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); border: 1px solid #e5e7eb; transition: outline 0.2s; }
        .adim-karti.adim-yorum { border-left-color: var(--comment-color); background-color: #f0f9ff; }
        .adim-karti.adim-blok { border-left-color: var(--block-color); background-color: #fffbeb; font-family: monospace; }
        .adim-karti.girinti-1 { margin-left: 20px; width: calc(100% - 20px); }
        .adim-karti.girinti-2 { margin-left: 40px; width: calc(100% - 40px); }
        .adim-karti.calisiyor { outline: 2px solid var(--primary-color); }
        .adim-karti.hata { outline: 2px solid var(--danger-color); border-left-color: var(--danger-color); }

        .adim-karti .tutanak { cursor: grab; color: #9ca3af; padding-right: 4px; }
        .adim-karti .ikon { font-size: 16px; width: 20px; text-align: center; }
        .adim-karti .detaylar { flex-grow: 1; font-size: 14px; word-break: break-word; }
        .adim-karti .detaylar .eylem-degeri { font-size: 13px; color: #4b5563; font-family: 'Courier New', Courier, monospace; background-color: #f3f4f6; padding: 2px 6px; border-radius: 4px; }
        .adim-karti .detaylar .degisken-etiketi { background-color: var(--primary-color); color: white; padding: 2px 5px; border-radius: 4px; font-size: 11px; font-weight: 500; font-family: sans-serif; vertical-align: middle; }
        .adim-karti .adim-eylemleri { margin-left: auto; display: flex; gap: 4px; }
        
        #senaryo-listesi .senaryo-karti { display: flex; align-items: center; padding: 16px; border: 1px solid var(--border-color); border-radius: 8px; margin-bottom: 12px; cursor: pointer; transition: all 0.2s; }
        #senaryo-listesi .senaryo-karti:hover { border-color: var(--primary-color); box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1); }
        .ana-gorunum-butonlari { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 16px; }

        .arac-kutusu-butonlari { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }
        
        #calistirma-durum-cubugu { padding: 8px 12px; margin-top: 15px; border-radius: 6px; font-size: 14px; text-align: center; display: none; }
        #calistirma-durum-cubugu.basari { background-color: #dcfce7; color: #166534; }
        #calistirma-durum-cubugu.hata { background-color: #fee2e2; color: #991b1b; }
        #calistirma-durum-cubugu.calisiyor { background-color: #dbeafe; color: #1e40af; }
        
        body.secim-modu, body.secim-modu * { cursor: crosshair !important; }
        .secim-icin-vurgula { outline: 3px solid var(--highlight-color) !important; outline-offset: 2px; }
        
        #eylem-modal-konteyner { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(17, 24, 39, 0.6); display: none; justify-content: center; align-items: center; z-index: 9990; backdrop-filter: blur(4px); }
        #eylem-modal { background: white; padding: 24px; border-radius: 12px; width: 400px; }
        #eylem-modal code { background: #f3f4f6; padding: 3px 6px; border-radius: 4px; display: block; white-space: pre-wrap; word-break: break-all; }
        #eylem-secenekleri button.aktif { background-color: var(--secondary-color); border-color: var(--primary-color); color: var(--primary-color); font-weight: 700; }
        .parametre-alani { margin-top: 15px; display: none; }
        .parametre-alani label { display: block; margin-bottom: 8px; font-weight: 500; font-size: 14px; }
        .parametre-alani input { width: 100%; padding: 10px; border: 1px solid var(--border-color); border-radius: 6px; font-size: 14px; }
    </style>
</head>
<body>
    <div id="sisypi-konteyner">
        <!-- ANA GÖRÜNÜM -->
        <div id="ana-gorunum" style="display:flex; flex-direction:column; height: 100%;">
            <div class="baslik">
                <h1 data-lang="appTitle">Sisypi</h1>
                <div class="buton-grup">
                    <button id="dil-tr-btn" class="btn-ikincil dil-btn">TR</button>
                    <button id="dil-en-btn" class="btn-ikincil dil-btn">EN</button>
                </div>
            </div>
            <div class="icerik">
                <button id="yeni-senaryo-btn" class="btn-birincil" style="width: 100%;" data-lang="yeniSenaryo"><i class="fa-solid fa-plus"></i>Yeni Senaryo Oluştur</button>
                <div id="senaryo-listesi" style="margin-top: 20px;"></div>
                 <div class="ana-gorunum-butonlari">
                    <button id="yedekle-btn" class="btn-ikincil" data-lang="tumunuYedekle"><i class="fa-solid fa-download"></i> Tümünü Yedekle</button>
                    <button id="geri-yukle-btn" class="btn-ikincil" data-lang="yedektenYukle"><i class="fa-solid fa-upload"></i> Yedekten Yükle</button>
                    <input type="file" id="geri-yukle-input" accept=".json" style="display: none;">
                </div>
            </div>
        </div>

        <!-- DÜZENLEYİCİ GÖRÜNÜMÜ -->
        <div id="editor-gorunumu" style="display: none; flex-direction: column; height: 100%;">
            <div class="baslik">
                <button id="ana-menuye-don-btn" class="btn-ikincil" data-lang="geri"><i class="fa-solid fa-arrow-left"></i> Geri</button>
                <div class="buton-grup">
                    <button id="senaryo-calistir-btn" class="btn-basari" data-lang="calistir"><i class="fa-solid fa-play"></i> Çalıştır</button>
                    <button id="senaryo-kaydet-btn" class="btn-birincil" data-lang="kaydet"><i class="fa-solid fa-save"></i> Kaydet</button>
                </div>
            </div>
            <div class="editor-icerik-alani">
                <input type="text" id="senaryo-adi-input" class="input-alani" data-lang-placeholder="senaryoAdiPlaceholder">
                <div>
                    <label for="senaryo-url-input" class="input-etiketi" data-lang="urlKisitlamaEtiket">URL Kısıtlaması (İsteğe Bağlı)</label>
                    <input type="text" id="senaryo-url-input" class="input-alani" data-lang-placeholder="urlKisitlamaPlaceholder">
                </div>
                <div id="adimlar-konteyner"></div>
            </div>
            <div class="editor-alt-bilgi">
                <button id="adim-ekle-btn" class="btn-birincil" style="width: 100%;" data-lang="adimEkle"><i class="fa-solid fa-wand-magic-sparkles"></i> Element Seçerek Adım Ekle</button>
                <div style="margin-top:15px; padding-top:15px; border-top: 1px dashed var(--border-color);">
                    <h4 style="margin: 0 0 12px 0; font-size: 14px; text-align: center; color: #4b5563;" data-lang="aracKutusu"><i class="fa-solid fa-toolbox"></i> Araç Kutusu</h4>
                    <div class="arac-kutusu-butonlari">
                        <button class="btn-ikincil arac-btn" data-eylem="wait" data-lang="aracBekle"><i class="fa-solid fa-clock"></i> Bekle</button>
                        <button class="btn-ikincil arac-btn" data-eylem="comment" data-lang="aracYorum"><i class="fa-solid fa-comment-dots"></i> Yorum</button>
                        <button class="btn-ikincil arac-btn" data-eylem="screenshot" data-lang="aracGoruntu"><i class="fa-solid fa-camera"></i> Görüntü</button>
                        <button class="btn-ikincil arac-btn" data-eylem="if_start" data-lang="aracEger"><b style="color:var(--block-color)">EĞER</b></button>
                        <button class="btn-ikincil arac-btn" data-eylem="else_block" data-lang="aracDegilse"><b style="color:var(--block-color)">DEĞİLSE</b></button>
                        <button class="btn-ikincil arac-btn" data-eylem="if_end" data-lang="aracEgerBitti"><b style="color:var(--block-color)">EĞER B.</b></button>
                        <button class="btn-ikincil arac-btn" data-eylem="loop_start" data-lang="aracDongu"><i class="fa-solid fa-repeat"></i> N Kez</button>
                        <button class="btn-ikincil arac-btn" data-eylem="loop_end" data-lang="aracDonguBitti"><b style="color:var(--block-color)">DÖNGÜ B.</b></button>
                        <button class="btn-ikincil arac-btn" data-eylem="scroll" data-lang="aracKaydir"><i class="fa-solid fa-arrows-down-to-line"></i> Kaydır</button>
                    </div>
                </div>
                 <div id="calistirma-durum-cubugu"></div>
            </div>
        </div>
    </div>

    <!-- MODAL PENCERE -->
    <div id="eylem-modal-konteyner">
        <div id="eylem-modal">
            <h3 id="modal-baslik" data-lang="modalBaslik">Eylemi Yapılandır</h3>
            <div>
                <p style="font-size:14px; color: #4b5563; margin-top: 0;" data-lang="modalHedefElement">Hedef element:</p>
                <code id="modal-secici-gosterim"></code>
            </div>
            <p style="margin-top: 20px;" data-lang="modalNeYapmakIstersin"><strong>Ne yapmak istersiniz?</strong></p>
            <div id="eylem-secenekleri" style="display:flex; gap: 10px;"></div>
            <div id="metin-parametre-alani" class="parametre-alani">
                <label for="metin-input" data-lang="modalYazilacakMetin">Yazılacak Metin (Değişken için {{isim}} kullanın):</label>
                <input type="text" id="metin-input" autocomplete="off">
            </div>
            <div id="degisken-parametre-alani" class="parametre-alani">
                <label for="degisken-input" data-lang="modalDegiskeneKaydet">Kopyalanan değeri değişkene kaydet (isteğe bağlı):</label>
                <input type="text" id="degisken-input" data-lang-placeholder="modalDegiskenPlaceholder" autocomplete="off">
            </div>
            <div class="modal-alt-bilgi" style="margin-top: 20px; display: flex; justify-content: flex-end; gap: 10px;">
                <button id="modal-iptal-btn" class="btn-ikincil" data-lang="iptal">İptal</button>
                <button id="modal-onayla-btn" class="btn-birincil" data-lang="adimiEkle">Adımı Ekle</button>
            </div>
        </div>
    </div>
    
    <script>
    (() => {
        // --- DİL METİNLERİ (i18n) ---
        const lang = {
            tr: {
                appTitle: "Sisypi",
                yeniSenaryo: "Yeni Senaryo Oluştur",
                tumunuYedekle: "Tümünü Yedekle",
                yedektenYukle: "Yedekten Yükle",
                geri: "Geri",
                calistir: "Çalıştır",
                kaydet: "Kaydet",
                urlKisitlamaEtiket: "URL Kısıtlaması (İsteğe Bağlı)",
                urlKisitlamaPlaceholder: "örn: google.com/maps",
                senaryoAdiPlaceholder: "Senaryo Adı",
                adimEkle: "Element Seçerek Adım Ekle",
                aracKutusu: "Araç Kutusu",
                aracBekle: "Bekle",
                aracYorum: "Yorum",
                aracGoruntu: "Görüntü",
                aracEger: "EĞER",
                aracDegilse: "DEĞİLSE",
                aracEgerBitti: "EĞER B.",
                aracDongu: "N Kez",
                aracDonguBitti: "DÖNGÜ B.",
                aracKaydir: "Kaydır",
                modalBaslik: "Eylemi Yapılandır",
                modalDuzenleBaslik: "Adımı Düzenle",
                modalHedefElement: "Hedef element:",
                modalNeYapmakIstersin: "Ne yapmak istersiniz?",
                modalYazilacakMetin: "Yazılacak Metin (Değişken için {{isim}} kullanın):",
                modalDegiskeneKaydet: "Kopyalanan değeri değişkene kaydet (isteğe bağlı):",
                modalDegiskenPlaceholder: "örn: kullaniciAdi",
                iptal: "İptal",
                adimiEkle: "Adımı Ekle",
                degisiklikleriKaydet: "Değişiklikleri Kaydet",
                eylemTikla: "Tıkla",
                eylemYaz: "Yaz",
                eylemKopyala: "Kopyala",
                senaryoSilOnay: "'{{baslik}}' senaryosunu silmek istediğinize emin misiniz?",
                yedekYukleOnay: "Mevcut tüm senaryolar silinecek ve yedekten gelenlerle değiştirilecek. Emin misiniz?",
                yedeklemeBasarili: "Geri yükleme başarılı!",
                gecersizJson: "Hata: Geçersiz JSON dosyası.",
                promptBekleme: "Bekleme süresi (ms):",
                promptYorum: "Yorum metni:",
                promptTekrar: "Tekrar sayısı:",
                promptIf: "Kontrol edilecek elementin seçicisi:",
                durumCalisiyor: "Senaryo çalıştırılıyor...",
                durumBasarili: "Senaryo başarıyla tamamlandı!",
                hataUrlUyusmuyor: "Hata: Senaryonun URL kısıtlaması ('{{kisitlama}}') mevcut sayfa adresiyle uyuşmuyor.",
                hataSeciciBulunamadi: "Seçici bulunamadı: {{secici}}",
                hataGenel: "Hata (Adım {{adim}}): {{mesaj}}",
                isimsizSenaryo: "İsimsiz Senaryo"
            },
            en: {
                appTitle: "Sisypi",
                yeniSenaryo: "Create New Scenario",
                tumunuYedekle: "Backup All",
                yedektenYukle: "Restore from Backup",
                geri: "Back",
                calistir: "Run",
                kaydet: "Save",
                urlKisitlamaEtiket: "URL Constraint (Optional)",
                urlKisitlamaPlaceholder: "e.g., google.com/maps",
                senaryoAdiPlaceholder: "Scenario Name",
                adimEkle: "Add Step by Selecting Element",
                aracKutusu: "Toolbox",
                aracBekle: "Wait",
                aracYorum: "Comment",
                aracGoruntu: "Image",
                aracEger: "IF",
                aracDegilse: "ELSE",
                aracEgerBitti: "ENDIF",
                aracDongu: "N Times",
                aracDonguBitti: "ENDL",
                aracKaydir: "Scroll",
                modalBaslik: "Configure Action",
                modalDuzenleBaslik: "Edit Step",
                modalHedefElement: "Target element:",
                modalNeYapmakIstersin: "What would you like to do?",
                modalYazilacakMetin: "Text to type (use {{name}} for variables):",
                modalDegiskeneKaydet: "Save copied value to a variable (optional):",
                modalDegiskenPlaceholder: "e.g., userName",
                iptal: "Cancel",
                adimiEkle: "Add Step",
                degisiklikleriKaydet: "Save Changes",
                eylemTikla: "Click",
                eylemYaz: "Type",
                eylemKopyala: "Copy",
                senaryoSilOnay: "Are you sure you want to delete the '{{baslik}}' scenario?",
                yedekYukleOnay: "All current scenarios will be deleted and replaced with the backup. Are you sure?",
                yedeklemeBasarili: "Restore successful!",
                gecersizJson: "Error: Invalid JSON file.",
                promptBekleme: "Wait duration (ms):",
                promptYorum: "Comment text:",
                promptTekrar: "Number of repetitions:",
                promptIf: "Selector of the element to check:",
                durumCalisiyor: "Scenario running...",
                durumBasarili: "Scenario completed successfully!",
                hataUrlUyusmuyor: "Error: Scenario's URL constraint ('{{kisitlama}}') does not match the current page URL.",
                hataSeciciBulunamadi: "Selector not found: {{secici}}",
                hataGenel: "Error (Step {{adim}}): {{mesaj}}",
                isimsizSenaryo: "Untitled Scenario"
            }
        };

        // --- UYGULAMA DURUMU & VERİLER ---
        let senaryolar = {};
        let degiskenler = {};
        let aktifSenaryoAnahtari = null;
        let sonVurgulananElement = null;
        let aktifModalDurumu = {};
        let calisiyor = false;
        let aktifDilMetinleri = lang.tr;

        // --- ELEMENT REFERANSLARI ---
        const tumElementReferanslari = {
            anaGorunum: document.getElementById('ana-gorunum'), editorGorunumu: document.getElementById('editor-gorunumu'),
            senaryoListesiKonteyner: document.getElementById('senaryo-listesi'), adimlarKonteyner: document.getElementById('adimlar-konteyner'),
            senaryoAdiInput: document.getElementById('senaryo-adi-input'), senaryoUrlInput: document.getElementById('senaryo-url-input'),
            yeniSenaryoBtn: document.getElementById('yeni-senaryo-btn'), anaMenuyeDonBtn: document.getElementById('ana-menuye-don-btn'),
            senaryoKaydetBtn: document.getElementById('senaryo-kaydet-btn'), senaryoCalistirBtn: document.getElementById('senaryo-calistir-btn'),
            adimEkleBtn: document.getElementById('adim-ekle-btn'), aracKutusu: document.querySelector('.arac-kutusu-butonlari'),
            yedekleBtn: document.getElementById('yedekle-btn'), geriYukleBtn: document.getElementById('geri-yukle-btn'), geriYukleInput: document.getElementById('geri-yukle-input'),
            durumCubugu: document.getElementById('calistirma-durum-cubugu'), eylemModalKonteyner: document.getElementById('eylem-modal-konteyner'),
            modalBaslik: document.getElementById('modal-baslik'), modalSeciciGosterim: document.getElementById('modal-secici-gosterim'),
            eylemSecenekleri: document.getElementById('eylem-secenekleri'), metinParametreAlani: document.getElementById('metin-parametre-alani'),
            metinInput: document.getElementById('metin-input'), degiskenParametreAlani: document.getElementById('degisken-parametre-alani'),
            degiskenInput: document.getElementById('degisken-input'), modalOnaylaBtn: document.getElementById('modal-onayla-btn'),
            modalIptalBtn: document.getElementById('modal-iptal-btn'), dilTrBtn: document.getElementById('dil-tr-btn'), dilEnBtn: document.getElementById('dil-en-btn')
        };
        const { adimlarKonteyner, senaryoAdiInput, senaryoUrlInput } = tumElementReferanslari;

        // --- ÇEKİRDEK FONKSİYONLAR ---
        const gorunumuGoster = (gorunum) => { tumElementReferanslari.anaGorunum.style.display = 'none'; tumElementReferanslari.editorGorunumu.style.display = 'none'; gorunum.style.display = 'flex'; };
        const senaryolariDepoyaKaydet = () => { localStorage.setItem('sisypi_senaryolar', JSON.stringify(senaryolar)); };
        
        const metinleriUygula = (dilKodu) => {
            aktifDilMetinleri = lang[dilKodu];
            localStorage.setItem('sisypi_dil', dilKodu);
            document.documentElement.lang = dilKodu;
            document.querySelectorAll('[data-lang]').forEach(el => { el.innerHTML = aktifDilMetinleri[el.dataset.lang] || el.innerHTML; });
            document.querySelectorAll('[data-lang-placeholder]').forEach(el => { el.placeholder = aktifDilMetinleri[el.dataset.langPlaceholder] || el.placeholder; });
            document.querySelectorAll('[data-lang-title]').forEach(el => { el.title = aktifDilMetinleri[el.dataset.langTitle] || el.title; });
        };

        const senaryolariDepodanYukle = () => {
            const kayitli = localStorage.getItem('sisypi_senaryolar');
            if (kayitli) { senaryolar = JSON.parse(kayitli); } 
            else { senaryolar = {
                    'ornek-1': { baslik: "Veri Kopyalama ve Değişken Kullanımı", urlKisitlamasi: "", adimlar: [{ tip: 'comment', metin: 'Alttaki senaryonun başlığını kopyala ve bir değişkene ata.' }, { tip: 'kopyala', deger: 'div.senaryo-karti:nth-of-type(2) h3', degisken: 'ornekBaslik' }, { tip: 'wait', ms: '500' }, { tip: 'yaz', deger: '#senaryo-adi-input', metin: 'Kopyalanan: {{ornekBaslik}}' }] },
                    'ornek-2': { baslik: "Koşullu İşlem (EĞER/DEĞİLSE)", urlKisitlamasi: "", adimlar: [{ tip: 'comment', metin: 'Sayfada olmayan bir elementi kontrol et.' }, { tip: 'if_start', deger: '#yok-boyle-bir-element' }, { tip: 'yaz', deger: '#senaryo-adi-input', metin: 'EĞER bloğu çalıştı (Bu metni görmemelisiniz).' }, { tip: 'else_block' }, { tip: 'yaz', deger: '#senaryo-adi-input', metin: 'DEĞİLSE bloğu doğru şekilde çalıştı.' }, { tip: 'if_end' }] },
                    'ornek-3': { baslik: "Döngü ve Hata Yakalama", urlKisitlamasi: "", adimlar: [{ tip: 'comment', metin: 'Ana menüdeki başlıklara 4 kez tıklamaya çalışacak. 4. başlık olmadığı için hata verecek.' }, { tip: 'loop_start', sayi: '4' }, { tip: 'tıkla', deger: 'div.senaryo-karti:nth-of-type({{dongu_indeksi}})' }, { tip: 'wait', ms: '500' }, { tip: 'tıkla', deger: '#ana-menuye-don-btn' }, { tip: 'wait', ms: '300' }, { tip: 'loop_end' }] }
            }; }
            senaryoListesiniDoldur();
        };
        
        const benzersizIdOlustur = () => `senaryo_${Date.now()}`;
        const bekle = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        
        // --- SENARYO ÇALIŞTIRMA MOTORU ---
        const durumuAyarla = (mesaj, tip) => { tumElementReferanslari.durumCubugu.textContent = mesaj; tumElementReferanslari.durumCubugu.className = tip; tumElementReferanslari.durumCubugu.style.display = 'block'; };
        const durumuTemizle = () => { tumElementReferanslari.durumCubugu.style.display = 'none'; document.querySelectorAll('.adim-karti.calisiyor, .adim-karti.hata').forEach(el => el.classList.remove('calisiyor', 'hata')); };
        const degiskenleriMetneEkle = (metin) => { if (typeof metin !== 'string') return metin; return metin.replace(/{{(.*?)}}/g, (eslesme, degiskenAdi) => degiskenler[degiskenAdi.trim()] || eslesme); };
        
        const senaryoyuCalistir = async () => {
            if (calisiyor) return;
            const aktifSenaryo = senaryolar[aktifSenaryoAnahtari];
            const kisitlama = aktifSenaryo.urlKisitlamasi;
            // Bu simülasyonda tarayıcı URL'si yerine mevcut dosyanın URL'sini kullanıyoruz.
            const mevcutUrl = window.location.href; 
            if (kisitlama && !mevcutUrl.includes(kisitlama)) {
                durumuAyarla(aktifDilMetinleri.hataUrlUyusmuyor.replace('{{kisitlama}}', kisitlama), 'hata');
                return;
            }

            calisiyor = true; degiskenler = {}; durumuTemizle(); durumuAyarla(aktifDilMetinleri.durumCalisiyor, 'calisiyor'); tumElementReferanslari.senaryoCalistirBtn.disabled = true;
            const adimElementleri = Array.from(adimlarKonteyner.children);
            
            const adimlariIsle = async (adimListesi, baslangicIndeksi = 0) => {
                let i = baslangicIndeksi;
                while (i < adimListesi.length) {
                    const el = adimListesi[i];
                    const veri = JSON.parse(el.dataset.adimVerisi);
                    document.querySelectorAll('.adim-karti.calisiyor').forEach(el => el.classList.remove('calisiyor'));
                    el.classList.add('calisiyor');
                    try {
                        let element = null; if (veri.deger) element = document.querySelector(degiskenleriMetneEkle(veri.deger));
                        switch (veri.tip) {
                            case 'tıkla': if (!element) throw new Error(aktifDilMetinleri.hataSeciciBulunamadi.replace('{{secici}}', veri.deger)); element.click(); break;
                            case 'yaz': if (!element) throw new Error(aktifDilMetinleri.hataSeciciBulunamadi.replace('{{secici}}', veri.deger)); element.value = degiskenleriMetneEkle(veri.metin); element.dispatchEvent(new Event('input',{bubbles:true})); break;
                            case 'kopyala': if (!element) throw new Error(aktifDilMetinleri.hataSeciciBulunamadi.replace('{{secici}}', veri.deger)); const d = element.value !== undefined ? element.value : element.textContent; if (veri.degisken) degiskenler[veri.degisken]=d.trim(); await navigator.clipboard.writeText(d.trim()); break;
                            case 'wait': await bekle(parseInt(veri.ms, 10)); break;
                            case 'if_start': const { elseIndeksi, bitisIndeksi } = blokBitimleriniBul(adimListesi, i); if (!!element) await adimlariIsle(adimListesi.slice(i + 1, elseIndeksi !== -1 ? elseIndeksi : bitisIndeksi)); else if (elseIndeksi !== -1) await adimlariIsle(adimListesi.slice(elseIndeksi + 1, bitisIndeksi)); i = bitisIndeksi; continue;
                            case 'loop_start': const bitis = blokBitimleriniBul(adimListesi, i).bitisIndeksi; for (let j=0; j<(parseInt(veri.sayi,10)||0); j++){ degiskenler['dongu_indeksi']=j+1; await adimlariIsle(adimListesi.slice(i+1,bitis));} i=bitis; continue;
                        }
                        await bekle(300); i++;
                    } catch (hata) {
                        el.classList.add('hata'); durumuAyarla(aktifDilMetinleri.hataGenel.replace('{{adim}}', i + 1).replace('{{mesaj}}', hata.message), 'hata');
                        calisiyor = false; tumElementReferanslari.senaryoCalistirBtn.disabled = false; return;
                    }
                }
            };
            await adimlariIsle(adimElementleri);
            if(calisiyor) durumuAyarla(aktifDilMetinleri.durumBasarili, 'basari');
            calisiyor = false; tumElementReferanslari.senaryoCalistirBtn.disabled = false;
        };

        const blokBitimleriniBul = (adimListesi, baslangicIndeksi) => { let eI=-1, bI=-1, s=0; const bT=JSON.parse(adimListesi[baslangicIndeksi].dataset.adimVerisi).tip; for(let i=baslangicIndeksi+1; i<adimListesi.length; i++){ const t=JSON.parse(adimListesi[i].dataset.adimVerisi).tip; if(bT==='if_start'){if(t==='if_start')s++; if(t==='else_block'&&s===0)eI=i; if(t==='if_end'){if(s===0){bI=i;break;}s--;}}else if(bT==='loop_start'){if(t==='loop_start')s++; if(t==='loop_end'){if(s===0){bI=i;break;}s--;}}} return {elseIndeksi:eI, bitisIndeksi:bI};};
        
        // --- ARAYÜZ & DOM YÖNETİMİ ---
        const adimEkleDOM = (veri) => { const el=document.createElement('div'); el.className='adim-karti'; el.innerHTML=`<span class="tutanak" data-lang-title="surukle"><i class="fa-solid fa-grip-vertical"></i></span><div class="ikon"></div><div class="detaylar"></div><div class="adim-eylemleri"><button class="btn-ikon duzenle-btn" data-lang-title="duzenle"><i class="fa-solid fa-pencil"></i></button><button class="btn-ikon sil-btn" data-lang-title="sil"><i class="fa-solid fa-trash"></i></button></div>`; adimGuncelleDOM(el, veri); adimlarKonteyner.appendChild(el); girintileriGuncelle(); };
        const adimGuncelleDOM = (el,veri) => { el.dataset.adimVerisi=JSON.stringify(veri); const {ikonSinifi,detaylarHTML,ikonRengi,blokMu}=adimIceriginiOlustur(veri); el.classList.toggle('adim-yorum',veri.tip==='comment'); el.classList.toggle('adim-blok',blokMu); el.querySelector('.ikon').innerHTML=`<i class="${ikonSinifi}"></i>`; el.querySelector('.ikon').style.color=ikonRengi; el.querySelector('.detaylar').innerHTML=detaylarHTML; };
        const adimIceriginiOlustur = (veri) => { let iS='',dH='',iR='var(--primary-color)',bM=false; const v=veri.deger?`<span class="eylem-degeri">${veri.deger}</span>`:''; switch(veri.tip){ case 'tıkla':iS='fa-solid fa-hand-pointer';dH=`<b>${aktifDilMetinleri.eylemTikla}:</b> ${v}`;break; case 'yaz':iS='fa-solid fa-keyboard';dH=`<b>${aktifDilMetinleri.eylemYaz}:</b> <span class="eylem-degeri">${veri.metin||""}</span> <i>içine</i> ${v}`;break; case 'kopyala':iS='fa-solid fa-copy';dH=`<b>${aktifDilMetinleri.eylemKopyala}:</b> ${v}`;if(veri.degisken)dH+=` <i class="fa-solid fa-arrow-right-long" style="margin:0 4px;"></i> <span class="degisken-etiketi">${veri.degisken}</span>`;break; case 'wait':iS='fa-solid fa-clock';dH=`<b>${aktifDilMetinleri.aracBekle}:</b> ${veri.ms||'1000'}ms`;break; case 'comment':iS='fa-solid fa-comment-dots';iR='var(--comment-color)';dH=`${veri.metin||'...'}`;break; case 'screenshot':iS='fa-solid fa-camera';dH=`<b>${aktifDilMetinleri.aracGoruntu}</b>`;break; case 'scroll':iS='fa-solid fa-arrows-down-to-line';dH=`<b>${aktifDilMetinleri.aracKaydir}</b>`;break; case 'if_start':iS='fa-solid fa-question';iR='var(--block-color)';bM=true;dH=`<b>${aktifDilMetinleri.aracEger}</b> ${v} <b>VARSA</b>`;break; case 'else_block':iS='fa-solid fa-arrows-split-up-and-left';iR='var(--block-color)';bM=true;dH=`<b>${aktifDilMetinleri.aracDegilse}</b>`;break; case 'if_end':iS='fa-solid fa-check-double';iR='var(--block-color)';bM=true;dH=`<b>${aktifDilMetinleri.aracEgerBitti}</b>`;break; case 'loop_start':iS='fa-solid fa-repeat';iR='var(--block-color)';bM=true;dH=`<b>${aktifDilMetinleri.aracDongu}</b> (${veri.sayi||'N'})`;break; case 'loop_end':iS='fa-solid fa-circle-stop';iR='var(--block-color)';bM=true;dH=`<b>${aktifDilMetinleri.aracDonguBitti}</b>`;break; default: iS='fa-solid fa-question-circle';dH=`Bilinmeyen Eylem`;} return {ikonSinifi:iS,detaylarHTML:dH,ikonRengi:iR,blokMu:bM}; };
        const girintileriGuncelle = () => { let s=0; adimlarKonteyner.querySelectorAll('.adim-karti').forEach(el=>{ const t=JSON.parse(el.dataset.adimVerisi).tip; if(['else_block','if_end','loop_end'].includes(t))s=Math.max(0,s-1); el.classList.remove('girinti-1','girinti-2'); if(s>0)el.classList.add(`girinti-${Math.min(s,2)}`); if(['if_start','loop_start'].includes(t))s++; }); };
        const senaryoListesiniDoldur = () => { const {senaryoListesiKonteyner} = tumElementReferanslari; senaryoListesiKonteyner.innerHTML = ''; Object.keys(senaryolar).forEach(anahtar => { const kart=document.createElement('div'); kart.className='senaryo-karti'; kart.dataset.senaryoAnahtari=anahtar; kart.innerHTML=`<div style="flex-grow:1;"><h3>${senaryolar[anahtar].baslik}</h3></div><button class="btn-ikon sil-btn" data-lang-title="sil"><i class="fa-solid fa-trash"></i></button>`; senaryoListesiKonteyner.appendChild(kart); }); metinleriUygula(localStorage.getItem('sisypi_dil') || 'tr'); };
        
        // --- Seçim Modu ---
        const secimModunuBaslat = () => { document.body.classList.add('secim-modu'); document.body.addEventListener('mouseover', elementiVurgula); document.body.addEventListener('click', elementiSec, { capture: true }); };
        const secimModunuDurdur = () => { document.body.classList.remove('secim-modu'); if (sonVurgulananElement) sonVurgulananElement.classList.remove('secim-icin-vurgula'); document.body.removeEventListener('mouseover', elementiVurgula); document.body.removeEventListener('click', elementiSec, { capture: true }); };
        const elementiVurgula = (e) => { const hedef=e.target; if (hedef.closest('#sisypi-konteyner'))return; if(sonVurgulananElement)sonVurgulananElement.classList.remove('secim-icin-vurgula'); hedef.classList.add('secim-icin-vurgula'); sonVurgulananElement=hedef; };
        const elementiSec = (e) => { e.preventDefault(); e.stopPropagation(); secimModunuDurdur(); modalGoster({ mod: 'ekle', secici: cssSeciciOlustur(e.target) }); };

        // --- Modal Yönetimi ---
        const modalGoster = (ayarlar) => { const {modalBaslik, modalOnaylaBtn, modalSeciciGosterim, eylemSecenekleri, metinParametreAlani, degiskenParametreAlani, metinInput, degiskenInput, eylemModalKonteyner} = tumElementReferanslari; aktifModalDurumu=ayarlar; modalBaslik.textContent=ayarlar.mod==='duzenle'?aktifDilMetinleri.modalDuzenleBaslik:aktifDilMetinleri.modalBaslik; modalOnaylaBtn.textContent=ayarlar.mod==='duzenle'?aktifDilMetinleri.degisiklikleriKaydet:aktifDilMetinleri.adimiEkle; modalSeciciGosterim.textContent=ayarlar.secici; eylemSecenekleri.innerHTML=''; [metinParametreAlani,degiskenParametreAlani].forEach(el=>el.style.display='none'); modalOnaylaBtn.disabled=true; [{id:'tıkla',t:'eylemTikla'},{id:'yaz',t:'eylemYaz'},{id:'kopyala',t:'eylemKopyala'}].forEach(e=>{ const b=document.createElement('button'); b.textContent=aktifDilMetinleri[e.t]; b.dataset.eylem=e.id; b.onclick=()=>modaldaEylemSec(e.id); eylemSecenekleri.appendChild(b);}); if(ayarlar.mod==='duzenle'){modaldaEylemSec(ayarlar.tip); metinInput.value=ayarlar.metin||''; degiskenInput.value=ayarlar.degisken||'';} eylemModalKonteyner.style.display='flex'; };
        const modaldaEylemSec = (eylem) => { const {modalOnaylaBtn, eylemSecenekleri, metinParametreAlani, degiskenParametreAlani} = tumElementReferanslari; aktifModalDurumu.tip=eylem; modalOnaylaBtn.disabled=false; Array.from(eylemSecenekleri.children).forEach(b=>b.classList.toggle('aktif',b.dataset.eylem===eylem)); metinParametreAlani.style.display=eylem==='yaz'?'block':'none'; degiskenParametreAlani.style.display=eylem==='kopyala'?'block':'none'; };
        const modalEyleminiOnayla = () => { const {metinInput, degiskenInput} = tumElementReferanslari; const yeniVeri={tip:aktifModalDurumu.tip,deger:aktifModalDurumu.secici,metin:metinInput.value,degisken:degiskenInput.value}; if(aktifModalDurumu.mod==='duzenle')adimGuncelleDOM(aktifModalDurumu.adimElementi,yeniVeri); else adimEkleDOM(yeniVeri); modaliKapat(); };
        const modaliKapat = () => tumElementReferanslari.eylemModalKonteyner.style.display = 'none';

        // --- Olay Dinleyicileri ---
        const {yeniSenaryoBtn, anaMenuyeDonBtn, senaryoKaydetBtn, senaryoCalistirBtn, adimEkleBtn, modalOnaylaBtn, modalIptalBtn, senaryoListesiKonteyner, aracKutusu, yedekleBtn, geriYukleBtn, geriYukleInput, dilTrBtn, dilEnBtn} = tumElementReferanslari;
        yeniSenaryoBtn.addEventListener('click', ()=>{ const k=benzersizIdOlustur(); senaryolar[k]={baslik:aktifDilMetinleri.isimsizSenaryo, urlKisitlamasi:"", adimlar:[]}; senaryoListesiniDoldur(); senaryoDuzenle(k); });
        const senaryoDuzenle = (anahtar) => { aktifSenaryoAnahtari=anahtar; senaryoAdiInput.value=senaryolar[anahtar].baslik; senaryoUrlInput.value=senaryolar[anahtar].urlKisitlamasi || ""; adimlarKonteyner.innerHTML=''; senaryolar[anahtar].adimlar.forEach(adimEkleDOM); gorunumuGoster(tumElementReferanslari.editorGorunumu); durumuTemizle(); };
        const mevcutSenaryoyuKaydet = () => { if(!aktifSenaryoAnahtari)return; const veriler=Array.from(adimlarKonteyner.children).map(el=>JSON.parse(el.dataset.adimVerisi)); senaryolar[aktifSenaryoAnahtari].baslik=senaryoAdiInput.value; senaryolar[aktifSenaryoAnahtari].urlKisitlamasi=senaryoUrlInput.value; senaryolar[aktifSenaryoAnahtari].adimlar=veriler; senaryolariDepoyaKaydet(); senaryoListesiniDoldur(); };
        anaMenuyeDonBtn.addEventListener('click', ()=>{ mevcutSenaryoyuKaydet(); gorunumuGoster(tumElementReferanslari.anaGorunum); });
        senaryoKaydetBtn.addEventListener('click', mevcutSenaryoyuKaydet);
        senaryoCalistirBtn.addEventListener('click', senaryoyuCalistir);
        adimEkleBtn.addEventListener('click', secimModunuBaslat);
        modalOnaylaBtn.addEventListener('click', modalEyleminiOnayla);
        modalIptalBtn.addEventListener('click', modaliKapat);
        senaryoListesiKonteyner.addEventListener('click', (e)=>{ const k=e.target.closest('.senaryo-karti'); if(!k)return; const a=k.dataset.senaryoAnahtari; if(e.target.closest('.sil-btn')){if(confirm(aktifDilMetinleri.senaryoSilOnay.replace('{{baslik}}', senaryolar[a].baslik))){delete senaryolar[a]; senaryolariDepoyaKaydet(); senaryoListesiniDoldur();}}else{senaryoDuzenle(a);}});
        adimlarKonteyner.addEventListener('click', (e)=>{ const el=e.target.closest('.adim-karti'); if(!el)return; const v=JSON.parse(el.dataset.adimVerisi); if(e.target.closest('.sil-btn')){el.remove();girintileriGuncelle();}else if(e.target.closest('.duzenle-btn')){if(['tıkla','yaz','kopyala'].includes(v.tip)){modalGoster({mod:'duzenle',adimElementi:el,...v});}else{let yD; if(v.tip==='wait')yD=prompt(aktifDilMetinleri.promptBekleme,v.ms); else if(v.tip==='comment')yD=prompt(aktifDilMetinleri.promptYorum,v.metin); else if(v.tip==='loop_start')yD=prompt(aktifDilMetinleri.promptTekrar,v.sayi); else if(v.tip==='if_start')yD=prompt(aktifDilMetinleri.promptIf,v.deger); if(yD!==null&&yD!==undefined){if(v.tip==='wait')v.ms=yD;else if(v.tip==='comment')v.metin=yD;else if(v.tip==='loop_start')v.sayi=yD;else if(v.tip==='if_start')v.deger=yD; adimGuncelleDOM(el,v);}}}});
        aracKutusu.addEventListener('click', (e)=>{ const b=e.target.closest('.arac-btn'); if(!b)return; const ey=b.dataset.eylem; let v={tip:ey}; if(ey==='wait')v.ms=prompt(aktifDilMetinleri.promptBekleme,1000)||1000; else if(ey==='comment')v.metin=prompt(aktifDilMetinleri.promptYorum,''); else if(ey==='loop_start')v.sayi=prompt(aktifDilMetinleri.promptTekrar,3)||3; else if(ey==='if_start')v.deger=prompt(aktifDilMetinleri.promptIf,''); adimEkleDOM(v);});
        yedekleBtn.addEventListener('click', ()=>{ const vT=JSON.stringify(senaryolar,null,2); const b=new Blob([vT],{type:'application/json'}); const u=URL.createObjectURL(b); const a=document.createElement('a'); a.href=u; a.download=`sisypi_yedek_${new Date().toISOString().slice(0,10)}.json`; a.click(); URL.revokeObjectURL(u);});
        geriYukleBtn.addEventListener('click', ()=>geriYukleInput.click());
        geriYukleInput.addEventListener('change', (e)=>{ const d=e.target.files[0]; if(!d)return; const o=new FileReader(); o.onload=(ev)=>{try{const yS=JSON.parse(ev.target.result); if(confirm(aktifDilMetinleri.yedekYukleOnay)){senaryolar=yS; senaryolariDepoyaKaydet(); senaryoListesiniDoldur(); alert(aktifDilMetinleri.yedeklemeBasarili);}}catch(h){alert(aktifDilMetinleri.gecersizJson);}}; o.readAsText(d); e.target.value='';});
        dilTrBtn.addEventListener('click', () => metinleriUygula('tr'));
        dilEnBtn.addEventListener('click', () => metinleriUygula('en'));
        const cssSeciciOlustur=(el)=>{if(el.id)return`#${el.id}`; let y=[]; while(el.parentElement){let p=el.tagName.toLowerCase(); const k=Array.from(el.parentElement.children).filter(e=>e.tagName===el.tagName); if(k.length>1)p+=`:nth-of-type(${k.indexOf(el)+1})`; y.unshift(p); el=el.parentElement;} return y.join(' > ');};

        // --- BAŞLANGIÇ ---
        new Sortable(adimlarKonteyner, { handle: '.tutanak', animation: 150, onEnd: girintileriGuncelle });
        metinleriUygula(localStorage.getItem('sisypi_dil') || 'tr'); // Önce dili uygula
        senaryolariDepodanYukle(); // Sonra veriyi yükle
    })();
    </script>
</body>
</html>